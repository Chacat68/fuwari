---
import { Icon } from "astro-icon/components";
import { navBarConfig, profileConfig, siteConfig } from "../config";
import { LinkPresets } from "../constants/link-presets";
import { LinkPreset, type NavBarLink } from "../types/config";
import { url } from "../utils/url-utils";
import LightDarkSwitch from "./LightDarkSwitch.svelte";
import Search from "./Search.svelte";
import DisplaySettings from "./widget/DisplaySettings.svelte";
import NavMenuPanel from "./widget/NavMenuPanel.astro";

const className = Astro.props.class;

let links: NavBarLink[] = navBarConfig.links.map(
	(item: NavBarLink | LinkPreset): NavBarLink => {
		if (typeof item === "number") {
			return LinkPresets[item];
		}
		return item;
	},
);
---
<div id="navbar" class="z-50 onload-animation">
    <div class="absolute h-8 left-0 right-0 -top-8 bg-[var(--card-bg)] transition"></div> <!-- used for onload animation -->
    <div class:list={[
        className,
        "card-base !overflow-visible max-w-[var(--page-width)] h-[4.5rem] !rounded-t-none mx-auto flex items-center justify-between px-4"]}>
        <a href={url('/')} class="btn-plain scale-animation rounded-lg h-[3.25rem] px-5 font-bold active:scale-95">
            <div class="flex flex-row text-[var(--primary)] items-center text-md">
                <img src={url('/logo/logo.png')} class="w-7 h-7 mr-2 hidden" alt="网站图标" />
                {siteConfig.title}
            </div>
        </a>
        <div class="hidden md:flex">
            {links.map((l) => {
                // 根据链接名称或URL确定图标
                let iconName = "";
                if (l.url === "/") iconName = "material-symbols:home-outline-rounded";
                else if (l.url === "/archive/") iconName = "material-symbols:archive-outline-rounded";
                else if (l.url === "/projects/") iconName = "material-symbols:dashboard-rounded";
                else if (l.url === "/friends/") iconName = "material-symbols:group-outline-rounded";
                else if (l.url === "/moments/my-moments/") iconName = "material-symbols:schedule-outline";
                else if (l.url === "/about/") iconName = "material-symbols:person-outline-rounded";
                else if (l.url.includes("arch.chawfoo.com")) iconName = "material-symbols:architecture-rounded";
                else if (l.url.includes("neodb")) iconName = "material-symbols:interests-outline-rounded";
                else iconName = "material-symbols:link";
                
                // 如果有子菜单，渲染下拉菜单
                if (l.children && l.children.length > 0) {
                    return (
                        <div class="nav-dropdown relative group">
                            <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                               class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95 flex items-center"
                            >
                                <div class="flex items-center">
                                    {iconName && <Icon name={iconName} class="text-[1.25rem] mr-1.5" />}
                                    {l.name}
                                    {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                                    <Icon name="material-symbols:keyboard-arrow-down" class="text-[1.25rem] ml-1 transition-transform group-hover:rotate-180" />
                                </div>
                            </a>
                            <!-- 二级菜单下拉面板 -->
                            <div class="nav-dropdown-menu absolute top-full left-0 mt-1 min-w-[200px] bg-[var(--card-bg)] border border-[var(--line-divider)] rounded-lg shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-50">
                                <div class="py-2">
                                    {l.children.map((child) => {
                                        // 为子菜单项确定图标
                                        let childIconName = "";
                                        if (child.url.includes("/opensource/")) childIconName = "material-symbols:code";
                                        else if (child.url.includes("/personal/")) childIconName = "material-symbols:person";
                                        else if (child.url.includes("/collaboration/")) childIconName = "material-symbols:group-work";
                                        else if (child.url.includes("/books/")) childIconName = "material-symbols:book";
                                        else if (child.url.includes("/movies/")) childIconName = "material-symbols:movie";
                                        else if (child.url.includes("/music/")) childIconName = "material-symbols:music-note";
                                        else childIconName = "material-symbols:link";
                                        
                                        return (
                                            <a href={child.external ? child.url : url(child.url)} target={child.external ? "_blank" : null}
                                               class="flex items-center px-4 py-2 text-sm hover:bg-[var(--btn-plain-bg-hover)] transition-colors duration-150"
                                            >
                                                {childIconName && <Icon name={childIconName} class="text-[1rem] mr-2" />}
                                                {child.name}
                                                {child.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.75rem] ml-auto text-black/[0.3] dark:text-white/[0.3]"></Icon>}
                                            </a>
                                        );
                                    })}
                                </div>
                            </div>
                        </div>
                    );
                } else {
                    // 没有子菜单的普通链接
                    return <a aria-label={l.name} href={l.external ? l.url : url(l.url)} target={l.external ? "_blank" : null}
                              class="btn-plain scale-animation rounded-lg h-11 font-bold px-5 active:scale-95"
                    >
                        <div class="flex items-center">
                            {iconName && <Icon name={iconName} class="text-[1.25rem] mr-1.5" />}
                            {l.name}
                            {l.external && <Icon name="fa6-solid:arrow-up-right-from-square" class="text-[0.875rem] transition -translate-y-[1px] ml-1 text-black/[0.2] dark:text-white/[0.2]"></Icon>}
                        </div>
                    </a>;
                }
            })}
        </div>
        <div class="flex">
            <!--<SearchPanel client:load>-->
            <Search client:load></Search>
            {!siteConfig.themeColor.fixed && (
                    <button aria-label="Display Settings" class="btn-plain scale-animation rounded-lg h-11 w-11 active:scale-90" id="display-settings-switch">
                        <Icon name="material-symbols:palette-outline" class="text-[1.25rem]"></Icon>
                    </button>
            )}
            <LightDarkSwitch client:load></LightDarkSwitch>
            <button aria-label="Menu" name="Nav Menu" class="btn-plain scale-animation rounded-lg w-11 h-11 active:scale-90 md:!hidden" id="nav-menu-switch">
                <Icon name="material-symbols:menu-rounded" class="text-[1.25rem]"></Icon>
            </button>
        </div>
        <NavMenuPanel links={links}></NavMenuPanel>
        <DisplaySettings client:load></DisplaySettings>
    </div>
</div>

<script>
function switchTheme() {
    if (localStorage.theme === 'dark') {
        document.documentElement.classList.remove('dark');
        localStorage.theme = 'light';
    } else {
        document.documentElement.classList.add('dark');
        localStorage.theme = 'dark';
    }
}

function loadButtonScript() {
    let switchBtn = document.getElementById("scheme-switch");
    if (switchBtn) {
        switchBtn.onclick = function () {
            switchTheme()
        };
    }

    let settingBtn = document.getElementById("display-settings-switch");
    if (settingBtn) {
        settingBtn.onclick = function () {
            let settingPanel = document.getElementById("display-setting");
            if (settingPanel) {
                settingPanel.classList.toggle("float-panel-closed");
            }
        };
    }

    let menuBtn = document.getElementById("nav-menu-switch");
    if (menuBtn) {
        menuBtn.onclick = function () {
            let menuPanel = document.getElementById("nav-menu-panel");
            if (menuPanel) {
                menuPanel.classList.toggle("float-panel-closed");
            }
        };
    }

    // 移动端二级菜单展开/收起功能
    function initMobileSubmenus() {
        const toggleButtons = document.querySelectorAll('.nav-menu-toggle');
        
        toggleButtons.forEach(button => {
            button.addEventListener('click', function(e: Event) {
                e.preventDefault();
                e.stopPropagation();
                
                const target = e.currentTarget as HTMLElement;
                const targetId = target.getAttribute('data-target');
                const submenu = document.getElementById(targetId || '');
                const arrow = target.querySelector('.nav-menu-arrow') as HTMLElement;
                
                if (submenu && arrow) {
                    const isExpanded = submenu.style.maxHeight && submenu.style.maxHeight !== '0px';
                    
                    if (isExpanded) {
                        // 收起子菜单
                        submenu.style.maxHeight = '0px';
                        arrow.style.transform = 'rotate(0deg)';
                    } else {
                        // 展开子菜单
                        submenu.style.maxHeight = submenu.scrollHeight + 'px';
                        arrow.style.transform = 'rotate(180deg)';
                    }
                }
            });
        });
    }
    
    // 初始化移动端子菜单
    initMobileSubmenus();
}

loadButtonScript();
</script>

{import.meta.env.PROD && <script is:inline define:vars={{scriptUrl: url('/pagefind/pagefind.js')}}>
async function loadPagefind() {
    try {
        const response = await fetch(scriptUrl, { method: 'HEAD' });
        if (!response.ok) {
            throw new Error(`Pagefind script not found: ${response.status}`);
        }

        const pagefind = await import(scriptUrl);

        await pagefind.options({
            excerptLength: 20
        });

        window.pagefind = pagefind;

        document.dispatchEvent(new CustomEvent('pagefindready'));
        console.log('Pagefind loaded and initialized successfully, event dispatched.');
    } catch (error) {
        console.error('Failed to load Pagefind:', error);
        window.pagefind = {
            search: () => Promise.resolve({ results: [] }),
            options: () => Promise.resolve(),
        };
        document.dispatchEvent(new CustomEvent('pagefindloaderror'));
        console.log('Pagefind load error, event dispatched.');
    }
}

if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', loadPagefind);
} else {
    loadPagefind();
}
</script>}
