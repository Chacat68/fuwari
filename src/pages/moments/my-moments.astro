---
import { getCollection } from 'astro:content';
import Layout from '@layouts/MainGridLayout.astro';

// 函数：从内容中提取时间戳并返回日期和清理后的内容
function extractDateAndCleanContent(content: string): { date: Date | null, cleanedContent: string } {
  const regex = /(\[\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2}\])\s*/;
  const match = content.match(regex);
  let date: Date | null = null;
  let cleanedContent = content;

  if (match && match[1]) {
    try {
      // 提取并解析时间戳
      const dateString = match[1].substring(1, match[1].length - 1); // 移除方括号
      const parsedDate = new Date(dateString.replace(' ', 'T'));
      date = isNaN(parsedDate.getTime()) ? null : parsedDate;

      // 移除匹配到的时间戳（包括后面的空格）
      cleanedContent = content.replace(regex, '').trim();

    } catch (e) {
      console.error('Failed to parse date from content:', match ? match[1] : 'No match', e);
    }
  }

  return { date, cleanedContent };
}



const moments = await getCollection('moments');

// 获取用于排序和显示的时间，优先从内容提取，其次 fromtmatter，最后默认值
const momentsWithDateAndContent = await Promise.all(moments.map(async moment => {
  const { date: dateFromContent, cleanedContent } = extractDateAndCleanContent(moment.body);
  const displayDate = dateFromContent || moment.data.updated || new Date(moment.slug.split('/').pop()?.split('.')[0] || 0);
  const sortDate = dateFromContent || moment.data.updated || new Date(0); // 用于排序，没有日期沉底
  
  return { ...moment, displayDate, sortDate: sortDate.getTime(), rawContent: cleanedContent, type: 'moment' as const };
}));

// 按时间排序
const allItems = momentsWithDateAndContent.sort((a, b) => {
  return b.sortDate - a.sortDate;
});

// 按年份分组
const groups = allItems.reduce((
  grouped: { year: number; items: typeof allItems }[],
  item
) => {
  const year = item.displayDate.getFullYear();
  let group = grouped.find(g => g.year === year);
  if (!group) {
    group = { year, items: [] };
    grouped.push(group);
  }
  group.items.push(item);
  return grouped;
}, []).sort((a, b) => b.year - a.year); // 按年份降序排序

const pageTitle = "此刻";
const pageDescription = "这里会记录一些我的日常思考和随笔。";

function formatDate(date: Date) {
	const month = (date.getMonth() + 1).toString().padStart(2, "0");
	const day = date.getDate().toString().padStart(2, "0");
	return `${month}-${day}`;
}
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="card-base px-8 py-6 max-w-4xl mx-auto">
    <h1 class="text-3xl font-bold mb-6 text-black/90 dark:text-white/90">{pageTitle}</h1>
    <p class="text-neutral-500 dark:text-neutral-400 mb-8">{pageDescription}</p>
    
    {
      groups.map(group => (
        <div>
          <div class="flex flex-row w-full items-center h-[3.75rem]">
            <div class="w-[15%] md:w-[10%] transition text-2xl font-bold text-right text-75">{group.year}</div>
            <div class="w-[15%] md:w-[10%]">
                <div class="h-3 w-3 bg-none rounded-full outline outline-[var(--primary)] mx-auto -outline-offset-[2px] z-50 outline-3"></div>
            </div>
            <div class="w-[70%] md:w-[80%] transition text-left text-50">{group.items.length} 条</div>
          </div>
          {group.items.map(item => (
            <div class="group btn-plain !block h-auto w-full rounded-lg hover:text-[initial] mb-4">
              <div class="flex flex-row justify-start items-center h-full">
                {/* date */}
                <div class="w-[15%] md:w-[10%] transition text-sm text-right text-50">
                  {formatDate(item.displayDate)}
                </div>
                {/* dot and line */}
                <div class="w-[15%] md:w-[10%] relative dash-line h-full flex items-center justify-center">
                  <div class="transition-all w-1 h-1 rounded group-hover:h-5
                        bg-[oklch(0.5_0.05_var(--hue))] group-hover:bg-[var(--primary)]
                        outline outline-4 z-50
                        outline-[var(--card-bg)]
                        group-hover:outline-[var(--btn-plain-bg-hover)]
                        group-active:outline-[var(--btn-plain-bg-active)]
                        "
                  ></div>
                </div>
                {/* moment content */}
                <div class="w-[70%] md:w-[80%] text-left font-bold group-hover:translate-x-1 transition-all text-75">
                   <article class="prose dark:prose-invert max-w-none !my-0"
                     set:html={item.rawContent}
                   >
                   </article>
                   {item.data?.image && (
                     <div class="mt-4">
                       <img src={item.data.image} alt={item.data?.title || "此刻图片"} class="rounded-lg max-w-full" />
                     </div>
                   )}
                </div>
              </div>
            </div>
          ))}
        </div>
      ))
    }
  </div>
</Layout>